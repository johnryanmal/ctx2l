# Generated from examples/json/jsonLexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,77,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,5,0,28,
        8,0,10,0,12,0,31,9,0,1,0,1,0,1,1,1,1,1,1,5,1,38,8,1,10,1,12,1,41,
        9,1,3,1,43,8,1,1,2,4,2,46,8,2,11,2,12,2,47,1,3,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,1,9,1,9,1,10,1,10,1,11,1,11,0,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,1,0,4,5,0,32,32,48,57,65,90,95,95,
        97,122,1,0,48,57,1,0,49,57,3,0,9,10,12,13,32,32,80,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,1,25,1,0,0,0,3,42,1,0,0,0,5,45,1,0,0,0,7,49,1,0,0,0,9,55,
        1,0,0,0,11,60,1,0,0,0,13,65,1,0,0,0,15,67,1,0,0,0,17,69,1,0,0,0,
        19,71,1,0,0,0,21,73,1,0,0,0,23,75,1,0,0,0,25,29,5,34,0,0,26,28,7,
        0,0,0,27,26,1,0,0,0,28,31,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,
        32,1,0,0,0,31,29,1,0,0,0,32,33,5,34,0,0,33,2,1,0,0,0,34,43,7,1,0,
        0,35,39,7,2,0,0,36,38,7,1,0,0,37,36,1,0,0,0,38,41,1,0,0,0,39,37,
        1,0,0,0,39,40,1,0,0,0,40,43,1,0,0,0,41,39,1,0,0,0,42,34,1,0,0,0,
        42,35,1,0,0,0,43,4,1,0,0,0,44,46,7,3,0,0,45,44,1,0,0,0,46,47,1,0,
        0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,6,1,0,0,0,49,50,5,102,0,0,50,
        51,5,97,0,0,51,52,5,108,0,0,52,53,5,115,0,0,53,54,5,101,0,0,54,8,
        1,0,0,0,55,56,5,110,0,0,56,57,5,117,0,0,57,58,5,108,0,0,58,59,5,
        108,0,0,59,10,1,0,0,0,60,61,5,116,0,0,61,62,5,114,0,0,62,63,5,117,
        0,0,63,64,5,101,0,0,64,12,1,0,0,0,65,66,5,44,0,0,66,14,1,0,0,0,67,
        68,5,58,0,0,68,16,1,0,0,0,69,70,5,91,0,0,70,18,1,0,0,0,71,72,5,93,
        0,0,72,20,1,0,0,0,73,74,5,123,0,0,74,22,1,0,0,0,75,76,5,125,0,0,
        76,24,1,0,0,0,5,0,29,39,42,47,0
    ]

class jsonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    STRING = 1
    NUMBER = 2
    WS = 3
    LITERAL__1 = 4
    LITERAL__2 = 5
    LITERAL__3 = 6
    LITERAL__4 = 7
    LITERAL__5 = 8
    LITERAL__6 = 9
    LITERAL__7 = 10
    LITERAL__8 = 11
    LITERAL__9 = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'false'", "'null'", "'true'", "','", "':'", "'['", "']'", "'{'", 
            "'}'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "NUMBER", "WS", "LITERAL__1", "LITERAL__2", "LITERAL__3", 
            "LITERAL__4", "LITERAL__5", "LITERAL__6", "LITERAL__7", "LITERAL__8", 
            "LITERAL__9" ]

    ruleNames = [ "STRING", "NUMBER", "WS", "LITERAL__1", "LITERAL__2", 
                  "LITERAL__3", "LITERAL__4", "LITERAL__5", "LITERAL__6", 
                  "LITERAL__7", "LITERAL__8", "LITERAL__9" ]

    grammarFileName = "jsonLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


