# Generated from ./ctx2lLexer.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


if __name__ is not None and "." in __name__:
    from .ctx2lLexerAdaptor import ctx2lLexerAdaptor
else:
    from ctx2lLexerAdaptor import ctx2lLexerAdaptor

def serializedATN():
    return [
        4,0,61,792,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
        4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,
        2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,
        7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,
        2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,
        7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,
        2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,
        7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,
        2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,
        7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
        2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
        7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,
        2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,
        7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,
        2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,
        7,96,2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,
        7,102,2,103,7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,
        2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,
        7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,
        2,119,7,119,2,120,7,120,2,121,7,121,1,0,1,0,1,0,1,0,1,0,5,0,254,
        8,0,10,0,12,0,257,9,0,1,0,1,0,1,0,1,0,1,0,5,0,264,8,0,10,0,12,0,
        267,9,0,1,0,3,0,270,8,0,1,1,1,1,1,1,1,1,1,1,5,1,277,8,1,10,1,12,
        1,280,9,1,1,1,1,1,1,1,1,1,1,1,5,1,287,8,1,10,1,12,1,290,9,1,1,1,
        3,1,293,8,1,1,2,1,2,1,2,1,2,5,2,299,8,2,10,2,12,2,302,9,2,1,3,1,
        3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,
        8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,342,8,13,10,13,12,13,345,
        9,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,357,
        8,14,10,14,12,14,360,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,5,15,374,8,15,10,15,12,15,377,9,15,1,15,1,15,
        1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
        1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,
        1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,
        1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,
        1,50,1,50,1,51,1,51,1,52,1,52,1,53,4,53,531,8,53,11,53,12,53,532,
        1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,3,55,543,8,55,1,56,1,56,
        1,57,1,57,1,58,1,58,1,58,1,58,1,58,3,58,554,8,58,1,59,1,59,1,59,
        1,60,1,60,1,60,1,60,1,60,3,60,564,8,60,3,60,566,8,60,3,60,568,8,
        60,3,60,570,8,60,1,61,1,61,1,61,5,61,575,8,61,10,61,12,61,578,9,
        61,3,61,580,8,61,1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,3,64,595,8,64,1,65,1,65,1,65,3,65,600,8,65,1,65,
        1,65,1,66,1,66,1,66,5,66,607,8,66,10,66,12,66,610,9,66,1,66,1,66,
        1,67,1,67,1,67,5,67,617,8,67,10,67,12,67,620,9,67,1,67,1,67,1,68,
        1,68,1,68,5,68,627,8,68,10,68,12,68,630,9,68,1,69,1,69,1,69,1,69,
        3,69,636,8,69,1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,1,73,1,73,
        1,74,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,
        1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,83,1,84,1,84,1,85,1,85,
        1,86,1,86,1,87,1,87,1,88,1,88,1,89,1,89,1,90,1,90,1,90,1,91,1,91,
        1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,96,1,96,1,97,1,97,1,97,
        1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,
        102,1,102,1,102,1,102,1,103,1,103,1,103,1,103,1,104,1,104,1,104,
        1,104,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,107,1,107,1,108,
        1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,110,1,110,1,110,
        1,110,1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,112,1,113,1,113,
        1,113,1,113,1,114,1,114,1,114,1,114,1,115,1,115,1,115,1,116,1,116,
        1,116,1,116,1,117,1,117,1,118,1,118,4,118,772,8,118,11,118,12,118,
        773,1,118,1,118,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,
        1,121,1,121,5,121,788,8,121,10,121,12,121,791,9,121,2,255,278,0,
        122,4,0,6,0,8,0,10,4,12,5,14,6,16,7,18,8,20,9,22,10,24,11,26,12,
        28,13,30,14,32,15,34,16,36,0,38,17,40,18,42,19,44,20,46,21,48,22,
        50,23,52,24,54,25,56,26,58,27,60,28,62,29,64,30,66,31,68,32,70,33,
        72,34,74,35,76,36,78,37,80,38,82,39,84,40,86,41,88,42,90,43,92,44,
        94,45,96,46,98,47,100,48,102,49,104,50,106,51,108,52,110,53,112,
        54,114,0,116,0,118,0,120,0,122,0,124,0,126,0,128,0,130,0,132,0,134,
        0,136,0,138,0,140,0,142,0,144,0,146,0,148,0,150,0,152,0,154,0,156,
        0,158,0,160,0,162,0,164,0,166,0,168,0,170,0,172,0,174,0,176,0,178,
        0,180,0,182,0,184,0,186,0,188,0,190,0,192,0,194,0,196,0,198,0,200,
        0,202,0,204,0,206,0,208,0,210,0,212,0,214,55,216,56,218,57,220,0,
        222,0,224,0,226,0,228,0,230,0,232,0,234,58,236,59,238,60,240,0,242,
        3,244,61,246,0,4,0,1,2,3,13,2,0,10,10,13,13,3,0,9,10,12,13,32,32,
        2,0,9,9,32,32,2,0,10,10,12,13,8,0,34,34,39,39,92,92,98,98,102,102,
        110,110,114,114,116,116,1,0,49,57,3,0,48,57,65,70,97,102,1,0,48,
        57,4,0,10,10,13,13,39,39,92,92,4,0,10,10,13,13,34,34,92,92,3,0,183,
        183,768,879,8255,8256,13,0,65,90,97,122,192,214,216,246,248,767,
        880,893,895,8191,8204,8205,8304,8591,11264,12271,12289,55295,63744,
        64975,65008,65533,1,0,92,93,772,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,
        0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,
        0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,
        0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,
        0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,
        0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,
        0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,
        0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,0,0,0,86,1,
        0,0,0,0,88,1,0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,1,0,0,0,0,96,1,
        0,0,0,0,98,1,0,0,0,0,100,1,0,0,0,0,102,1,0,0,0,0,104,1,0,0,0,0,106,
        1,0,0,0,0,108,1,0,0,0,0,110,1,0,0,0,0,112,1,0,0,0,1,206,1,0,0,0,
        1,208,1,0,0,0,1,210,1,0,0,0,1,212,1,0,0,0,1,214,1,0,0,0,1,216,1,
        0,0,0,1,218,1,0,0,0,2,220,1,0,0,0,2,222,1,0,0,0,2,224,1,0,0,0,2,
        226,1,0,0,0,2,228,1,0,0,0,2,230,1,0,0,0,2,232,1,0,0,0,2,234,1,0,
        0,0,2,236,1,0,0,0,2,238,1,0,0,0,3,240,1,0,0,0,3,242,1,0,0,0,3,244,
        1,0,0,0,4,248,1,0,0,0,6,271,1,0,0,0,8,294,1,0,0,0,10,303,1,0,0,0,
        12,305,1,0,0,0,14,307,1,0,0,0,16,311,1,0,0,0,18,315,1,0,0,0,20,319,
        1,0,0,0,22,321,1,0,0,0,24,323,1,0,0,0,26,325,1,0,0,0,28,328,1,0,
        0,0,30,332,1,0,0,0,32,348,1,0,0,0,34,363,1,0,0,0,36,380,1,0,0,0,
        38,382,1,0,0,0,40,389,1,0,0,0,42,398,1,0,0,0,44,404,1,0,0,0,46,411,
        1,0,0,0,48,419,1,0,0,0,50,429,1,0,0,0,52,436,1,0,0,0,54,444,1,0,
        0,0,56,452,1,0,0,0,58,459,1,0,0,0,60,466,1,0,0,0,62,472,1,0,0,0,
        64,480,1,0,0,0,66,485,1,0,0,0,68,487,1,0,0,0,70,489,1,0,0,0,72,491,
        1,0,0,0,74,493,1,0,0,0,76,495,1,0,0,0,78,497,1,0,0,0,80,499,1,0,
        0,0,82,501,1,0,0,0,84,503,1,0,0,0,86,505,1,0,0,0,88,507,1,0,0,0,
        90,509,1,0,0,0,92,511,1,0,0,0,94,513,1,0,0,0,96,515,1,0,0,0,98,517,
        1,0,0,0,100,519,1,0,0,0,102,521,1,0,0,0,104,523,1,0,0,0,106,525,
        1,0,0,0,108,527,1,0,0,0,110,530,1,0,0,0,112,536,1,0,0,0,114,542,
        1,0,0,0,116,544,1,0,0,0,118,546,1,0,0,0,120,548,1,0,0,0,122,555,
        1,0,0,0,124,558,1,0,0,0,126,579,1,0,0,0,128,581,1,0,0,0,130,583,
        1,0,0,0,132,594,1,0,0,0,134,596,1,0,0,0,136,603,1,0,0,0,138,613,
        1,0,0,0,140,623,1,0,0,0,142,635,1,0,0,0,144,637,1,0,0,0,146,639,
        1,0,0,0,148,643,1,0,0,0,150,645,1,0,0,0,152,647,1,0,0,0,154,650,
        1,0,0,0,156,652,1,0,0,0,158,654,1,0,0,0,160,656,1,0,0,0,162,658,
        1,0,0,0,164,660,1,0,0,0,166,662,1,0,0,0,168,664,1,0,0,0,170,666,
        1,0,0,0,172,669,1,0,0,0,174,671,1,0,0,0,176,673,1,0,0,0,178,675,
        1,0,0,0,180,677,1,0,0,0,182,679,1,0,0,0,184,681,1,0,0,0,186,684,
        1,0,0,0,188,686,1,0,0,0,190,688,1,0,0,0,192,690,1,0,0,0,194,692,
        1,0,0,0,196,694,1,0,0,0,198,696,1,0,0,0,200,699,1,0,0,0,202,701,
        1,0,0,0,204,703,1,0,0,0,206,705,1,0,0,0,208,710,1,0,0,0,210,714,
        1,0,0,0,212,718,1,0,0,0,214,722,1,0,0,0,216,725,1,0,0,0,218,729,
        1,0,0,0,220,731,1,0,0,0,222,736,1,0,0,0,224,740,1,0,0,0,226,744,
        1,0,0,0,228,748,1,0,0,0,230,752,1,0,0,0,232,756,1,0,0,0,234,760,
        1,0,0,0,236,763,1,0,0,0,238,767,1,0,0,0,240,771,1,0,0,0,242,777,
        1,0,0,0,244,781,1,0,0,0,246,785,1,0,0,0,248,249,5,33,0,0,249,250,
        5,45,0,0,250,251,5,45,0,0,251,255,1,0,0,0,252,254,9,0,0,0,253,252,
        1,0,0,0,254,257,1,0,0,0,255,256,1,0,0,0,255,253,1,0,0,0,256,269,
        1,0,0,0,257,255,1,0,0,0,258,259,5,45,0,0,259,260,5,45,0,0,260,261,
        5,45,0,0,261,265,1,0,0,0,262,264,8,0,0,0,263,262,1,0,0,0,264,267,
        1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,270,1,0,0,0,267,265,
        1,0,0,0,268,270,5,0,0,1,269,258,1,0,0,0,269,268,1,0,0,0,270,5,1,
        0,0,0,271,272,5,63,0,0,272,273,5,45,0,0,273,274,5,45,0,0,274,278,
        1,0,0,0,275,277,9,0,0,0,276,275,1,0,0,0,277,280,1,0,0,0,278,279,
        1,0,0,0,278,276,1,0,0,0,279,292,1,0,0,0,280,278,1,0,0,0,281,282,
        5,45,0,0,282,283,5,45,0,0,283,284,5,45,0,0,284,288,1,0,0,0,285,287,
        8,0,0,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,
        1,0,0,0,289,293,1,0,0,0,290,288,1,0,0,0,291,293,5,0,0,1,292,281,
        1,0,0,0,292,291,1,0,0,0,293,7,1,0,0,0,294,295,5,45,0,0,295,296,5,
        45,0,0,296,300,1,0,0,0,297,299,8,0,0,0,298,297,1,0,0,0,299,302,1,
        0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,9,1,0,0,0,302,300,1,0,
        0,0,303,304,3,162,79,0,304,11,1,0,0,0,305,306,3,164,80,0,306,13,
        1,0,0,0,307,308,3,6,1,0,308,309,1,0,0,0,309,310,6,5,0,0,310,15,1,
        0,0,0,311,312,3,4,0,0,312,313,1,0,0,0,313,314,6,6,0,0,314,17,1,0,
        0,0,315,316,3,8,2,0,316,317,1,0,0,0,317,318,6,7,0,0,318,19,1,0,0,
        0,319,320,3,126,61,0,320,21,1,0,0,0,321,322,3,136,66,0,322,23,1,
        0,0,0,323,324,3,140,68,0,324,25,1,0,0,0,325,326,3,166,81,0,326,327,
        6,11,1,0,327,27,1,0,0,0,328,329,3,162,79,0,329,330,1,0,0,0,330,331,
        6,12,2,0,331,29,1,0,0,0,332,333,5,111,0,0,333,334,5,112,0,0,334,
        335,5,116,0,0,335,336,5,105,0,0,336,337,5,111,0,0,337,338,5,110,
        0,0,338,339,5,115,0,0,339,343,1,0,0,0,340,342,3,36,16,0,341,340,
        1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,346,
        1,0,0,0,345,343,1,0,0,0,346,347,5,123,0,0,347,31,1,0,0,0,348,349,
        5,116,0,0,349,350,5,111,0,0,350,351,5,107,0,0,351,352,5,101,0,0,
        352,353,5,110,0,0,353,354,5,115,0,0,354,358,1,0,0,0,355,357,3,36,
        16,0,356,355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,
        0,0,359,361,1,0,0,0,360,358,1,0,0,0,361,362,5,123,0,0,362,33,1,0,
        0,0,363,364,5,99,0,0,364,365,5,104,0,0,365,366,5,97,0,0,366,367,
        5,110,0,0,367,368,5,110,0,0,368,369,5,101,0,0,369,370,5,108,0,0,
        370,371,5,115,0,0,371,375,1,0,0,0,372,374,3,36,16,0,373,372,1,0,
        0,0,374,377,1,0,0,0,375,373,1,0,0,0,375,376,1,0,0,0,376,378,1,0,
        0,0,377,375,1,0,0,0,378,379,5,123,0,0,379,35,1,0,0,0,380,381,7,1,
        0,0,381,37,1,0,0,0,382,383,5,105,0,0,383,384,5,109,0,0,384,385,5,
        112,0,0,385,386,5,111,0,0,386,387,5,114,0,0,387,388,5,116,0,0,388,
        39,1,0,0,0,389,390,5,102,0,0,390,391,5,114,0,0,391,392,5,97,0,0,
        392,393,5,103,0,0,393,394,5,109,0,0,394,395,5,101,0,0,395,396,5,
        110,0,0,396,397,5,116,0,0,397,41,1,0,0,0,398,399,5,108,0,0,399,400,
        5,101,0,0,400,401,5,120,0,0,401,402,5,101,0,0,402,403,5,114,0,0,
        403,43,1,0,0,0,404,405,5,112,0,0,405,406,5,97,0,0,406,407,5,114,
        0,0,407,408,5,115,0,0,408,409,5,101,0,0,409,410,5,114,0,0,410,45,
        1,0,0,0,411,412,5,103,0,0,412,413,5,114,0,0,413,414,5,97,0,0,414,
        415,5,109,0,0,415,416,5,109,0,0,416,417,5,97,0,0,417,418,5,114,0,
        0,418,47,1,0,0,0,419,420,5,112,0,0,420,421,5,114,0,0,421,422,5,111,
        0,0,422,423,5,116,0,0,423,424,5,101,0,0,424,425,5,99,0,0,425,426,
        5,116,0,0,426,427,5,101,0,0,427,428,5,100,0,0,428,49,1,0,0,0,429,
        430,5,112,0,0,430,431,5,117,0,0,431,432,5,98,0,0,432,433,5,108,0,
        0,433,434,5,105,0,0,434,435,5,99,0,0,435,51,1,0,0,0,436,437,5,112,
        0,0,437,438,5,114,0,0,438,439,5,105,0,0,439,440,5,118,0,0,440,441,
        5,97,0,0,441,442,5,116,0,0,442,443,5,101,0,0,443,53,1,0,0,0,444,
        445,5,114,0,0,445,446,5,101,0,0,446,447,5,116,0,0,447,448,5,117,
        0,0,448,449,5,114,0,0,449,450,5,110,0,0,450,451,5,115,0,0,451,55,
        1,0,0,0,452,453,5,108,0,0,453,454,5,111,0,0,454,455,5,99,0,0,455,
        456,5,97,0,0,456,457,5,108,0,0,457,458,5,115,0,0,458,57,1,0,0,0,
        459,460,5,116,0,0,460,461,5,104,0,0,461,462,5,114,0,0,462,463,5,
        111,0,0,463,464,5,119,0,0,464,465,5,115,0,0,465,59,1,0,0,0,466,467,
        5,99,0,0,467,468,5,97,0,0,468,469,5,116,0,0,469,470,5,99,0,0,470,
        471,5,104,0,0,471,61,1,0,0,0,472,473,5,102,0,0,473,474,5,105,0,0,
        474,475,5,110,0,0,475,476,5,97,0,0,476,477,5,108,0,0,477,478,5,108,
        0,0,478,479,5,121,0,0,479,63,1,0,0,0,480,481,5,109,0,0,481,482,5,
        111,0,0,482,483,5,100,0,0,483,484,5,101,0,0,484,65,1,0,0,0,485,486,
        3,150,73,0,486,67,1,0,0,0,487,488,3,152,74,0,488,69,1,0,0,0,489,
        490,3,192,94,0,490,71,1,0,0,0,491,492,3,194,95,0,492,73,1,0,0,0,
        493,494,3,158,77,0,494,75,1,0,0,0,495,496,3,160,78,0,496,77,1,0,
        0,0,497,498,3,170,83,0,498,79,1,0,0,0,499,500,3,172,84,0,500,81,
        1,0,0,0,501,502,3,174,85,0,502,83,1,0,0,0,503,504,3,176,86,0,504,
        85,1,0,0,0,505,506,3,178,87,0,506,87,1,0,0,0,507,508,3,180,88,0,
        508,89,1,0,0,0,509,510,3,184,90,0,510,91,1,0,0,0,511,512,3,182,89,
        0,512,93,1,0,0,0,513,514,3,188,92,0,514,95,1,0,0,0,515,516,3,190,
        93,0,516,97,1,0,0,0,517,518,3,198,97,0,518,99,1,0,0,0,519,520,3,
        196,96,0,520,101,1,0,0,0,521,522,3,200,98,0,522,103,1,0,0,0,523,
        524,3,202,99,0,524,105,1,0,0,0,525,526,3,204,100,0,526,107,1,0,0,
        0,527,528,3,246,121,0,528,109,1,0,0,0,529,531,3,114,55,0,530,529,
        1,0,0,0,531,532,1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,534,
        1,0,0,0,534,535,6,53,3,0,535,111,1,0,0,0,536,537,9,0,0,0,537,538,
        1,0,0,0,538,539,6,54,4,0,539,113,1,0,0,0,540,543,3,116,56,0,541,
        543,3,118,57,0,542,540,1,0,0,0,542,541,1,0,0,0,543,115,1,0,0,0,544,
        545,7,2,0,0,545,117,1,0,0,0,546,547,7,3,0,0,547,119,1,0,0,0,548,
        553,3,148,72,0,549,554,7,4,0,0,550,554,3,124,60,0,551,554,9,0,0,
        0,552,554,5,0,0,1,553,549,1,0,0,0,553,550,1,0,0,0,553,551,1,0,0,
        0,553,552,1,0,0,0,554,121,1,0,0,0,555,556,3,148,72,0,556,557,9,0,
        0,0,557,123,1,0,0,0,558,569,5,117,0,0,559,567,3,128,62,0,560,565,
        3,128,62,0,561,563,3,128,62,0,562,564,3,128,62,0,563,562,1,0,0,0,
        563,564,1,0,0,0,564,566,1,0,0,0,565,561,1,0,0,0,565,566,1,0,0,0,
        566,568,1,0,0,0,567,560,1,0,0,0,567,568,1,0,0,0,568,570,1,0,0,0,
        569,559,1,0,0,0,569,570,1,0,0,0,570,125,1,0,0,0,571,580,5,48,0,0,
        572,576,7,5,0,0,573,575,3,130,63,0,574,573,1,0,0,0,575,578,1,0,0,
        0,576,574,1,0,0,0,576,577,1,0,0,0,577,580,1,0,0,0,578,576,1,0,0,
        0,579,571,1,0,0,0,579,572,1,0,0,0,580,127,1,0,0,0,581,582,7,6,0,
        0,582,129,1,0,0,0,583,584,7,7,0,0,584,131,1,0,0,0,585,586,5,116,
        0,0,586,587,5,114,0,0,587,588,5,117,0,0,588,595,5,101,0,0,589,590,
        5,102,0,0,590,591,5,97,0,0,591,592,5,108,0,0,592,593,5,115,0,0,593,
        595,5,101,0,0,594,585,1,0,0,0,594,589,1,0,0,0,595,133,1,0,0,0,596,
        599,3,154,75,0,597,600,3,120,58,0,598,600,8,8,0,0,599,597,1,0,0,
        0,599,598,1,0,0,0,600,601,1,0,0,0,601,602,3,154,75,0,602,135,1,0,
        0,0,603,608,3,154,75,0,604,607,3,120,58,0,605,607,8,8,0,0,606,604,
        1,0,0,0,606,605,1,0,0,0,607,610,1,0,0,0,608,606,1,0,0,0,608,609,
        1,0,0,0,609,611,1,0,0,0,610,608,1,0,0,0,611,612,3,154,75,0,612,137,
        1,0,0,0,613,618,3,156,76,0,614,617,3,120,58,0,615,617,8,9,0,0,616,
        614,1,0,0,0,616,615,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,
        619,1,0,0,0,619,621,1,0,0,0,620,618,1,0,0,0,621,622,3,156,76,0,622,
        139,1,0,0,0,623,628,3,154,75,0,624,627,3,120,58,0,625,627,8,8,0,
        0,626,624,1,0,0,0,626,625,1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,
        0,628,629,1,0,0,0,629,141,1,0,0,0,630,628,1,0,0,0,631,636,3,144,
        70,0,632,636,2,48,57,0,633,636,3,186,91,0,634,636,7,10,0,0,635,631,
        1,0,0,0,635,632,1,0,0,0,635,633,1,0,0,0,635,634,1,0,0,0,636,143,
        1,0,0,0,637,638,7,11,0,0,638,145,1,0,0,0,639,640,5,105,0,0,640,641,
        5,110,0,0,641,642,5,116,0,0,642,147,1,0,0,0,643,644,5,92,0,0,644,
        149,1,0,0,0,645,646,5,58,0,0,646,151,1,0,0,0,647,648,5,58,0,0,648,
        649,5,58,0,0,649,153,1,0,0,0,650,651,5,39,0,0,651,155,1,0,0,0,652,
        653,5,34,0,0,653,157,1,0,0,0,654,655,5,40,0,0,655,159,1,0,0,0,656,
        657,5,41,0,0,657,161,1,0,0,0,658,659,5,123,0,0,659,163,1,0,0,0,660,
        661,5,125,0,0,661,165,1,0,0,0,662,663,5,91,0,0,663,167,1,0,0,0,664,
        665,5,93,0,0,665,169,1,0,0,0,666,667,5,45,0,0,667,668,5,62,0,0,668,
        171,1,0,0,0,669,670,5,60,0,0,670,173,1,0,0,0,671,672,5,62,0,0,672,
        175,1,0,0,0,673,674,5,61,0,0,674,177,1,0,0,0,675,676,5,63,0,0,676,
        179,1,0,0,0,677,678,5,42,0,0,678,181,1,0,0,0,679,680,5,43,0,0,680,
        183,1,0,0,0,681,682,5,43,0,0,682,683,5,61,0,0,683,185,1,0,0,0,684,
        685,5,95,0,0,685,187,1,0,0,0,686,687,5,124,0,0,687,189,1,0,0,0,688,
        689,5,36,0,0,689,191,1,0,0,0,690,691,5,44,0,0,691,193,1,0,0,0,692,
        693,5,59,0,0,693,195,1,0,0,0,694,695,5,46,0,0,695,197,1,0,0,0,696,
        697,5,46,0,0,697,698,5,46,0,0,698,199,1,0,0,0,699,700,5,64,0,0,700,
        201,1,0,0,0,701,702,5,35,0,0,702,203,1,0,0,0,703,704,5,126,0,0,704,
        205,1,0,0,0,705,706,3,166,81,0,706,707,1,0,0,0,707,708,6,101,5,0,
        708,709,6,101,6,0,709,207,1,0,0,0,710,711,3,122,59,0,711,712,1,0,
        0,0,712,713,6,102,5,0,713,209,1,0,0,0,714,715,3,138,67,0,715,716,
        1,0,0,0,716,717,6,103,5,0,717,211,1,0,0,0,718,719,3,136,66,0,719,
        720,1,0,0,0,720,721,6,104,5,0,721,213,1,0,0,0,722,723,3,168,82,0,
        723,724,6,105,7,0,724,215,1,0,0,0,725,726,5,0,0,1,726,727,1,0,0,
        0,727,728,6,106,8,0,728,217,1,0,0,0,729,730,9,0,0,0,730,219,1,0,
        0,0,731,732,3,162,79,0,732,733,1,0,0,0,733,734,6,108,9,0,734,735,
        6,108,2,0,735,221,1,0,0,0,736,737,3,122,59,0,737,738,1,0,0,0,738,
        739,6,109,9,0,739,223,1,0,0,0,740,741,3,138,67,0,741,742,1,0,0,0,
        742,743,6,110,9,0,743,225,1,0,0,0,744,745,3,136,66,0,745,746,1,0,
        0,0,746,747,6,111,9,0,747,227,1,0,0,0,748,749,3,6,1,0,749,750,1,
        0,0,0,750,751,6,112,9,0,751,229,1,0,0,0,752,753,3,4,0,0,753,754,
        1,0,0,0,754,755,6,113,9,0,755,231,1,0,0,0,756,757,3,8,2,0,757,758,
        1,0,0,0,758,759,6,114,9,0,759,233,1,0,0,0,760,761,3,164,80,0,761,
        762,6,115,10,0,762,235,1,0,0,0,763,764,5,0,0,1,764,765,1,0,0,0,765,
        766,6,116,8,0,766,237,1,0,0,0,767,768,9,0,0,0,768,239,1,0,0,0,769,
        772,8,12,0,0,770,772,3,122,59,0,771,769,1,0,0,0,771,770,1,0,0,0,
        772,773,1,0,0,0,773,771,1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,
        775,776,6,118,11,0,776,241,1,0,0,0,777,778,3,168,82,0,778,779,1,
        0,0,0,779,780,6,119,8,0,780,243,1,0,0,0,781,782,5,0,0,1,782,783,
        1,0,0,0,783,784,6,120,8,0,784,245,1,0,0,0,785,789,3,144,70,0,786,
        788,3,142,69,0,787,786,1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,
        790,1,0,0,0,790,247,1,0,0,0,791,789,1,0,0,0,35,0,1,2,3,255,265,269,
        278,288,292,300,343,358,375,532,542,553,563,565,567,569,576,579,
        594,599,606,608,616,618,626,628,635,771,773,789,12,0,3,0,1,11,0,
        5,2,0,0,2,0,0,1,0,7,57,0,5,1,0,1,105,1,4,0,0,7,60,0,1,115,2,3,0,
        0
    ]

class ctx2lLexer(ctx2lLexerAdaptor):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    OFF_CHANNEL = 2
    COMMENT = 3

    Argument = 1
    TargetLanguageAction = 2
    LexerCharSet = 3

    TOKEN_REF = 1
    RULE_REF = 2
    LEXER_CHAR_SET = 3
    LBRACE = 4
    RBRACE = 5
    DOC_COMMENT = 6
    BLOCK_COMMENT = 7
    LINE_COMMENT = 8
    INT = 9
    STRING_LITERAL = 10
    UNTERMINATED_STRING_LITERAL = 11
    BEGIN_ARGUMENT = 12
    BEGIN_ACTION = 13
    OPTIONS = 14
    TOKENS = 15
    CHANNELS = 16
    IMPORT = 17
    FRAGMENT = 18
    LEXER = 19
    PARSER = 20
    GRAMMAR = 21
    PROTECTED = 22
    PUBLIC = 23
    PRIVATE = 24
    RETURNS = 25
    LOCALS = 26
    THROWS = 27
    CATCH = 28
    FINALLY = 29
    MODE = 30
    COLON = 31
    COLONCOLON = 32
    COMMA = 33
    SEMI = 34
    LPAREN = 35
    RPAREN = 36
    RARROW = 37
    LT = 38
    GT = 39
    ASSIGN = 40
    QUESTION = 41
    STAR = 42
    PLUS_ASSIGN = 43
    PLUS = 44
    OR = 45
    DOLLAR = 46
    RANGE = 47
    DOT = 48
    AT = 49
    POUND = 50
    NOT = 51
    ID = 52
    WS = 53
    ERRCHAR = 54
    END_ARGUMENT = 55
    UNTERMINATED_ARGUMENT = 56
    ARGUMENT_CONTENT = 57
    END_ACTION = 58
    UNTERMINATED_ACTION = 59
    ACTION_CONTENT = 60
    UNTERMINATED_CHAR_SET = 61

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN", u"OFF_CHANNEL", 
                                                          u"COMMENT" ]

    modeNames = [ "DEFAULT_MODE", "Argument", "TargetLanguageAction", "LexerCharSet" ]

    literalNames = [ "<INVALID>",
            "'import'", "'fragment'", "'lexer'", "'parser'", "'grammar'", 
            "'protected'", "'public'", "'private'", "'returns'", "'locals'", 
            "'throws'", "'catch'", "'finally'", "'mode'" ]

    symbolicNames = [ "<INVALID>",
            "TOKEN_REF", "RULE_REF", "LEXER_CHAR_SET", "LBRACE", "RBRACE", 
            "DOC_COMMENT", "BLOCK_COMMENT", "LINE_COMMENT", "INT", "STRING_LITERAL", 
            "UNTERMINATED_STRING_LITERAL", "BEGIN_ARGUMENT", "BEGIN_ACTION", 
            "OPTIONS", "TOKENS", "CHANNELS", "IMPORT", "FRAGMENT", "LEXER", 
            "PARSER", "GRAMMAR", "PROTECTED", "PUBLIC", "PRIVATE", "RETURNS", 
            "LOCALS", "THROWS", "CATCH", "FINALLY", "MODE", "COLON", "COLONCOLON", 
            "COMMA", "SEMI", "LPAREN", "RPAREN", "RARROW", "LT", "GT", "ASSIGN", 
            "QUESTION", "STAR", "PLUS_ASSIGN", "PLUS", "OR", "DOLLAR", "RANGE", 
            "DOT", "AT", "POUND", "NOT", "ID", "WS", "ERRCHAR", "END_ARGUMENT", 
            "UNTERMINATED_ARGUMENT", "ARGUMENT_CONTENT", "END_ACTION", "UNTERMINATED_ACTION", 
            "ACTION_CONTENT", "UNTERMINATED_CHAR_SET" ]

    ruleNames = [ "BlockComment", "DocComment", "LineComment", "LBRACE", 
                  "RBRACE", "DOC_COMMENT", "BLOCK_COMMENT", "LINE_COMMENT", 
                  "INT", "STRING_LITERAL", "UNTERMINATED_STRING_LITERAL", 
                  "BEGIN_ARGUMENT", "BEGIN_ACTION", "OPTIONS", "TOKENS", 
                  "CHANNELS", "WSNLCHARS", "IMPORT", "FRAGMENT", "LEXER", 
                  "PARSER", "GRAMMAR", "PROTECTED", "PUBLIC", "PRIVATE", 
                  "RETURNS", "LOCALS", "THROWS", "CATCH", "FINALLY", "MODE", 
                  "COLON", "COLONCOLON", "COMMA", "SEMI", "LPAREN", "RPAREN", 
                  "RARROW", "LT", "GT", "ASSIGN", "QUESTION", "STAR", "PLUS_ASSIGN", 
                  "PLUS", "OR", "DOLLAR", "RANGE", "DOT", "AT", "POUND", 
                  "NOT", "ID", "WS", "ERRCHAR", "Ws", "Hws", "Vws", "EscSeq", 
                  "EscAny", "UnicodeEsc", "DecimalNumeral", "HexDigit", 
                  "DecDigit", "BoolLiteral", "CharLiteral", "SQuoteLiteral", 
                  "DQuoteLiteral", "USQuoteLiteral", "NameChar", "NameStartChar", 
                  "Int", "Esc", "Colon", "DColon", "SQuote", "DQuote", "LParen", 
                  "RParen", "LBrace", "RBrace", "LBrack", "RBrack", "RArrow", 
                  "Lt", "Gt", "Equal", "Question", "Star", "Plus", "PlusAssign", 
                  "Underscore", "Pipe", "Dollar", "Comma", "Semi", "Dot", 
                  "Range", "At", "Pound", "Tilde", "NESTED_ARGUMENT", "ARGUMENT_ESCAPE", 
                  "ARGUMENT_STRING_LITERAL", "ARGUMENT_CHAR_LITERAL", "END_ARGUMENT", 
                  "UNTERMINATED_ARGUMENT", "ARGUMENT_CONTENT", "NESTED_ACTION", 
                  "ACTION_ESCAPE", "ACTION_STRING_LITERAL", "ACTION_CHAR_LITERAL", 
                  "ACTION_DOC_COMMENT", "ACTION_BLOCK_COMMENT", "ACTION_LINE_COMMENT", 
                  "END_ACTION", "UNTERMINATED_ACTION", "ACTION_CONTENT", 
                  "LEXER_CHAR_SET_BODY", "LEXER_CHAR_SET", "UNTERMINATED_CHAR_SET", 
                  "Id" ]

    grammarFileName = "ctx2lLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[11] = self.BEGIN_ARGUMENT_action 
            actions[105] = self.END_ARGUMENT_action 
            actions[115] = self.END_ACTION_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def BEGIN_ARGUMENT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             self.handleBeginArgument() 
     

    def END_ARGUMENT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
             self.handleEndArgument() 
     

    def END_ACTION_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
             self.handleEndAction() 
     


